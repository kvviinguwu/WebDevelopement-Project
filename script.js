window.addEventListener('DOMContentLoaded', (event) => {
    document.querySelectorAll('.btn').forEach(button => {
        button.addEventListener('click', function(e){
            e.preventDefault();
            const sectionId = this.getAttribute('data-section');
            document.querySelector('#' + sectionId).scrollIntoView({ behavior: 'smooth' });
        });
    });
    init();
});

async function init () {
    const node = document.querySelector("#type-text")
    
    node.innerText = ""
    await node.type('Tak wiÄ™c: ')
    
    while (true) {
      await node.type('Mam 24 lata, w IT dziaÅ‚am od ponad oÅ›miu lat. ')
      await sleep(5000)
      await node.delete('Mam 24 lata, w IT dziaÅ‚am od ponad oÅ›miu lat. ')
      await node.type('Zawodowo zajmuje siÄ™ sieciami i cyberbezpieczeÅ„stwem. ')
      await sleep(5000)
      await node.delete('Zawodowo zajmuje siÄ™ sieciami i cyberbezpieczeÅ„stwem. ')
      await node.type('W wolnym czasie lubiÄ™ psuÄ‡ i naprawiaÄ‡ elektronikÄ™. ')
      await sleep(5000)
      await node.delete('W wolnym czasie lubiÄ™ psuÄ‡ i naprawiaÄ‡ elektronikÄ™. ')
      await node.type('Jestem czÅ‚onkiem ISSA Polska. ')
      await sleep(5000)
      await node.delete('Jestem czÅ‚onkiem ISSA Polska. ')
      await node.type('ZaÅ‚oÅ¼yÅ‚em koÅ‚o naukowe WardenOwls. ')
      await sleep(5000)
      await node.delete('ZaÅ‚oÅ¼yÅ‚em koÅ‚o naukowe WardenOwls. ')
    }
  }
  
  
  // Source code ðŸš©
  
  const sleep = time => new Promise(resolve => setTimeout(resolve, time))
  
  class TypeAsync extends HTMLSpanElement {
    get typeInterval () {
      const randomMs = 100 * Math.random()
      return randomMs < 50 ? 10 : randomMs
    }
    
    async type (text) {
        for (let character of text) {
            this.innerHTML += character === ' ' ? '&nbsp;' : character;
            await sleep(this.typeInterval);
        }
    }
    
    async delete () {
        while (this.innerHTML.length > 0) {
            if (this.innerHTML.endsWith("&nbsp;")) {
                this.innerHTML = this.innerHTML.slice(0, this.innerHTML.length - 6);
            } else {
                this.innerHTML = this.innerHTML.slice(0, this.innerHTML.length - 1);
            }
            await sleep(this.typeInterval);
        }
    }
  }
  
  customElements.define('type-async', TypeAsync, { extends: 'span' })
  
  
  init()
  